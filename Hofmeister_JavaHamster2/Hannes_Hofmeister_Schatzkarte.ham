/*imperative program*/void main() {
	/*Zu Beginn wird die Blickrichtung auf 0 für Osten gesetzt.
		Die Körner auf dem Start Feld werden gezählt und gespeichert
		Nun beginnt der Hamster das besonders leckere Korn zu suchen
		Dies erkennt der Hamster daran das nur ein Korn liegt
		Auf der Suche nach dem Korn muss der Hamster:
			-Zuerst die Richtung bestimmen in die er gehen soll,
			 diese ist Abhaengig von der Anazhl der Körner die er
			 gezählt hat.
			-Jetzt muss der Hamster wissen wie oft er sich drehen muss um die neue Richtung
			 einzuschlagen dazu rechnet er mit dem zuvor errechnetem Wert und der
			 Momentanen Blickrichtung
			-Nun dreht der Hamster sich so oft wie zuvor errechnet und geht
			 nach vorne soviele Felder wie Körner auf dem Feld waren
			-Wenn die Schatzkarte stimmt ist er auf einem neuen Körner haufen oder am Ziel
			-Die Körner werden um dies zu überprüfen also gezählt
			-Die neue Blickrichtung wird vermerkt
		Fals das leckere Korn nicht gefunden wurde wird dieser Vorgang wiederholt[Z.7]
	*/
	int blickRichtung=0;
	int koernerAufFeld=zaehleKoerner();
	while(koernerAufFeld>1){
		int neueBlickRichtung = neueRichtung(koernerAufFeld);
		int ausrichten=richtungRechnen(neueBlickRichtung,blickRichtung);
		linksUm(ausrichten);
		vor(koernerAufFeld);
		koernerAufFeld=zaehleKoerner();
		blickRichtung=neueBlickRichtung;
	}
}
/*
	Hier wird bestimmt in welche Richtung sich der Hamster drehen muss.
	Es wird geschaut ob sich die Anzahl durch 4,3,2,1 teilen lässt und gibt den
	groeßt moeglichen Wert zurück. Dabei stehen die Werte für die Himmelsrichtung.
*/
int neueRichtung(int Anzahl){
	if (Anzahl%4==0){
		return 4;
	}else{
		if (Anzahl%3==0){
			return 3;
		}else{
			if (Anzahl%2==0){
				return 2;
			}else{
				return 1;
			}
		}
	}
}
/*Es wird die Differenz zwischen der der Momentanen(alten) und gewollten
 Richtung gebildet um sich anschließend um diese Differenz zu drehen
 Fals diese unter 0 fallen sollte wir der alte wert vorher um 4 ergänzt, da 4
 drehungen das selbe Resultat wie keine Drehung hat aber die Differenz
 nicht unter 0 fallen darf.
*/
int richtungRechnen (int neu,int alt){
	if (alt>neu){
		return alt-neu;
	}else{
		return alt+4 -neu;
	}
}

/*
	Eine einfache Prozedur bei der die Anzahl der Koerner auf einem Feld
	gezählt wird und anschliessend zurück gegeben wird.
*/

int zaehleKoerner(){
	int koerner=0;
	while(kornDa()){
		nimm();
		koerner++;
	}
		return koerner;
}
/*
	Die Prozedur geht die Angegebenen Felder nach vorne
*/
void vor(int felder){
	while (felder>0){
		vor();
		felder--;
	}
}
/*
	Die Prozedur dreht sich x mal nach links
*/
void linksUm(int dreh){
	while (dreh>0){
		linksUm();
		dreh=dreh -1;
	}
}
